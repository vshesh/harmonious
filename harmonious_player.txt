# Welcome to Sonic Pi v3.0.1

set :looping?, true
set :tower1, [0, -1]
set :tower2, [0, -1]
set :tower3, [0, -1]
set :tower4, [0, -1]
set :note1, nil
set :note2, nil
set :note3, nil
set :note4, nil

#uses index to map the chord - 1-7 are as positioned (dummy argument in zero)
fiducial_map = [
  (ring 0, 7, 12, 16, 19, 24),
  (ring 0, 7, 10, 12, 15),
  (ring 0, 7, 10, 12, 15),
  (ring 0, 7, 12, 16, 19),
  (ring 0, 4, 7, 10, 16),
  (ring 0, 3, 7, 12, 15),
  (ring 0, 3, 6, 10)
]

inverted_fiducial_map = [
  (ring 4, 12, 19, 23, 26), # Cmaj9/E for example
  (ring 3, 7, 12, 14, 19, 24), #Dm9/F for example
  (ring 3, 7, 12, 17, 24), #Em11/G for example
  (ring 4, 7, 12, 16, 23), #Fmaj7(#11)/A for example
  (ring -8, 0, 7, 10, 16, 21), # G13/B for example
  (ring 3, 7, 12, 14, 17), #Am11/C for example
  (ring 3, 6, 10, 12), #Bm7b5/D for example
]
polychord_base_map = (map e: (ring 0, 4, 7),
                      E: (ring 4, 7, 12),
                      d: (shift 2, (ring 0, 3, 7)),
                      D: (shift 2, (ring 3, 7, 12)),
                      t: (shift 4, (ring 0, 3, 7)),
                      T: (shift 4, (ring 3, 7, 12)),
                      c: (shift 5, (ring 0, 4, 7)),
                      C: (shift 5, (ring 4, 7, 12)),
                      p: (shift 7, (ring 0, 4, 7)),
                      P: (shift 7, (ring 4, 7, 12)),
                      x: (shift 9, (ring 0, 3, 7)),
                      X: (shift 9, (ring 3, 7, 12)),
                      s: (shift 11, (ring 0, 3, 6)),
                      S: (shift 11, (ring 3, 6, 12))
                      )


define :shift do |n, iterable|
  l = []
  d = note(n)
  iterable.each do |e|
    l.push (e+d)
  end
  l
end

define :make_key do |tonic, voicings|
  l = [[]]
  maj = (scale :major)
  [0,1,2,3,4,5,6].each do |i|
    l.push shift note(tonic)+maj[i], voicings[i]
  end
  l
end

define :build_polychord do |key_root, base, top|
  base = polychord_base_map[base]
  top = polychord_base_map[top]
  shift key_root, (base + (shift (if top[0]-base[0] < 9 then 12 else 0 end), top))
end

key_c = make_key :C3, fiducial_map
ikey_c = make_key :C3, inverted_fiducial_map
play key_c[5], sustain: 2, release:0
sleep 2
play key_c[1], sustain: 2

define :get_tower_number do |x|
  # subtract margins and then take a quadrant
  # scale x to be in 0.05 - 0.95
  scaled = (x-0.05)/(0.95-0.05)
  if scaled <= 0.25
    4
  else
    if x <= 0.5
      3
    else
      if x <= 0.75
        2
      else
        1
      end
    end
  end
end

# check for the fiducials
live_loop :fiducials do
  use_real_time
  id, x, y, angle = sync "/osc/tuio/fiducial"
  tower = get_tower_number x
  set :tower1, [id, angle] if tower == 1
  set :tower2, [id, angle] if tower == 2
  set :tower3, [id, angle] if tower == 3
  set :tower4, [id, angle] if tower == 4
end

# receive button presses
live_loop :buttons do
  use_real_time
  id, state = sync "/osc/button"
  set :looping?, if state == 1 then true else false end if id == 0
  control get[:note1], notes: (retrieve_voicing :tower1), amp: if state == 1 then 1 else 0 end if id == 1
  control get[:note2], notes: (retrieve_voicing :tower2), amp: if state == 1 then 1 else 0 end if id == 2
  control get[:note3], notes: (retrieve_voicing :tower3), amp: if state == 1 then 1 else 0 end if id == 3
  control get[:note4], notes: (retrieve_voicing :tower4), amp: if state == 1 then 1 else 0 end if id == 4
end

define :play_bar do |chord|
  2.times do
    play chord if get[:looping?]
    sleep 1
  end
end

define :retrieve_voicing do |symbol|
  if get[symbol][1] < 0
    []
  else
    if get[symbol][0].is_a? Integer
      if get[symbol][1] > 2 and get[symbol][1] < 5
        ikey_c[get[symbol][0]]
      else
        key_c[get[symbol][0]]
      end
    else
      # polychord
      build_polychord :C3, get[symbol][0][0].to_sym, get[symbol][0][1].to_sym
    end
  end
end

# setup main loop
live_loop :progression do
  use_osc "localhost", 3334
  puts get[:tower1][0], get[:tower1][1]
  osc "/light", if get[:looping?] then 1 else -1 end, 4
  play_bar retrieve_voicing :tower1
  osc "/light", if get[:looping?] then 2 else -1 end, 1
  play_bar retrieve_voicing :tower2
  osc "/light", if get[:looping?] then 3 else -1 end, 2
  play_bar retrieve_voicing :tower3
  osc "/light", if get[:looping?] then 4 else -1 end, 3
  play_bar retrieve_voicing :tower4
end
